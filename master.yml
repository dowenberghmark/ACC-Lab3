heat_template_version: 2013-05-23

description: Try to contextualize with different config files

# Declare parameters 
parameters:

  image:
    type: string
    label: Image name or ID
    description: Image to be used for compute instance
    default: c5352437-d878-4e64-9814-b1aa7d31c797

  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used
    default: m1.small

  key:
    type: string
    label: Key name
    description: Name of key-pair to be used for compute instance
    default: daow0306

  public_network:
    type: string
    label: Public network name or ID
    description: Public network with floating IP addresses.
    default: public


# Resource allocation
resources:
  boot_script:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #!/bin/bash
        echo "Hello, World!"
        echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCbuq/tma61uLdaQRn7kCIuzQiF12X1qsrb7I+PrdFs8MxEqeuWp5DOnUr07yk+EmvjI2zG966quhaExoNLPBSqUqA+9EgKXzkKrxr/fU3ktFvTHkpcg2Y+NcwAD8rqjcIdryRz5J7gTSvEvqyDPrCUCGdMudDQofVmZMksMLyjrr/O8TuZZkUpLsSQm7YdSdQj4RpapJGf1WTzLTsKJjA8JxskFrn6L3yVPf1n36LYtvBuv1bvvQ3AFv5pQ25+YQ8TXGYb83JSrgDs8e8SpTitY6gurhtKEkTjSIbx1Bc2bEm0XRKcvpfmLZH/U7zFAhkawCF+hH+qp0CYAPzLJr0D owen@OwenLaptop" >> /home/ubuntu/.ssh/authorized_keys
        apt-add-repository -y ppa:ansible/ansible
        apt-get update -y
        apt-get upgrade -y
        apt-get install -y ansible
              


  config_pip:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
      - name: result
      config: |
        #!/bin/sh -x
        sudo apt-get install -y pip
        echo "y" | sudo pip install -U celery
        echo "y" | sudo pip install Flask
        sudo apt-get install -y rabbitmq-server
        echo "I got this far" > $heat_outputs_path.result

  server_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: boot_config}
      - config: {get_resource: config_pip}
      
  #deployment:
    #type: OS::Heat::SoftwareDeployment
    #properties:
      #config:
        #get_resource: config
     # server:
      #  get_resource: my_instance0
        
  cluster_sg:
    type: OS::Neutron::SecurityGroup
    properties:
      name: cluster_sg
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
 
  private_network:
    type: OS::Neutron::Net

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_network }
      cidr: 10.10.10.0/24
      dns_nameservers:
        - 130.238.164.6 
        - 130.238.4.133 
        - 130.238.7.10
  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_network }

  router-interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet: { get_resource: private_subnet }

  instance_port0:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: private_network }
      security_groups:
        - { get_resource: cluster_sg }



  my_instance0:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key }
      #security_groups:
      #  - { get_resource: cluster_sg }
      networks:
        - port: { get_resource: instance_port0 }         
      
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: server_init}



  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }

  floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip }
      port_id: { get_resource: instance_port0 } 

# Output in case of successful booting
outputs:
  instance_name:
    description: Name of the instance
    value: { get_attr: [my_instance0, name] }
  instance_ip:
    description: IP address of the instance
    value: { get_attr: [my_instance0, first_address, floating_ip, floating_ip_address] }
#  result:
 #   value:
  #    get_attr: [deployment, result]
  #stdout:
   # value:
    #  get_attr: [deployment, deploy_stdout]
